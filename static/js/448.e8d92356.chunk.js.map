{"version":3,"file":"static/js/448.e8d92356.chunk.js","mappings":"2OAEaA,EAAOC,EAAAA,GAAAA,EAAQC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,2GASfC,EAAaH,EAAAA,GAAAA,KAAWI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,kEAMxBG,EAAeL,EAAAA,GAAAA,OAAaM,IAAAA,GAAAJ,EAAAA,EAAAA,GAAA,oH,UCf5BK,EAAOP,EAAAA,GAAAA,GAASC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,8GAQhBM,EAAWR,EAAAA,GAAAA,GAASI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,yC,UCVpBO,EAAe,SAAAC,GAAK,OAAIA,EAAMC,OAAOA,MAAO,ECG5CC,EAAiB,SAAAF,GAAK,OAAIA,EAAMG,SAASC,KAAM,EAC/CC,EAAgB,SAAAL,GAAK,OAAIA,EAAMG,SAASG,SAAU,EAClDC,EAAc,SAAAP,GAAK,OAAIA,EAAMG,SAASK,KAAM,EAE5CC,GAAkBC,EAAAA,EAAAA,IAAe,CAACR,EAAgBH,IAC7D,SAACI,EAAUF,GACT,OAAOE,EAASF,QAAO,SAAAU,GAAO,OAAIA,EAAQC,KAAKC,cAAcC,SAASb,EAAOY,cAAc,GAC/F,I,SCJaE,EAAc,WACzB,IAAMZ,GAAWa,EAAAA,EAAAA,IAAYP,GACvBQ,GAAWC,EAAAA,EAAAA,MACjB,OACEC,EAAAA,EAAAA,KAACtB,EAAI,CAAAuB,SACFjB,EAASkB,KAAI,SAAAC,GAAI,OAChBC,EAAAA,EAAAA,MAACzB,EAAQ,CAAAsB,SAAA,EACPG,EAAAA,EAAAA,MAAClC,EAAI,CAAA+B,SAAA,CACFE,EAAKV,MACNO,EAAAA,EAAAA,KAAC1B,EAAU,CAAA2B,SAAEE,EAAKE,aAEpBL,EAAAA,EAAAA,KAACxB,EAAY,CAAC8B,QAAS,kBAAMR,GAASS,EAAAA,EAAAA,IAAcJ,EAAKK,IAAI,EAACP,SAAC,aALlDE,EAAKK,GAQT,KAInB,E,8BChBaC,GAAOtC,EAAAA,EAAAA,IAAOuC,EAAAA,GAAPvC,CAAkBC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,mIASzBsC,GAAQxC,EAAAA,EAAAA,IAAOyC,EAAAA,GAAPzC,CAAmBI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,2BAI3BwC,GAAe1C,EAAAA,EAAAA,IAAO2C,EAAAA,GAAP3C,CAAmBM,IAAAA,GAAAJ,EAAAA,EAAAA,GAAA,6CAKlC0C,EAAY5C,EAAAA,GAAAA,MAAY6C,IAAAA,GAAA3C,EAAAA,EAAAA,GAAA,oECZ/B4C,EAAgBC,EAAAA,KAAaC,MAAM,CACvC1B,KAAMyB,EAAAA,KAAaE,IAAI,EAAG,cAAcC,SAAS,YACjDhB,OAAQa,EAAAA,KACLI,QAJH,0GAIwB,6BACrBD,SAAS,cAGDE,EAAc,WACzB,IAAMzB,GAAWC,EAAAA,EAAAA,MACXyB,GAAY3B,EAAAA,EAAAA,IAAYd,GAU9B,OACEiB,EAAAA,EAAAA,KAACyB,EAAAA,GAAM,CACLC,cAAe,CACbjC,KAAM,GACNY,OAAQ,IAEVsB,iBAAkBV,EAClBW,SAAU,SAACC,EAAQC,GAfF,IAAAC,EAgBfD,EAAQE,YAhBOD,EAiBFF,EAhBGL,EAAWS,MAAK,SAAAzC,GAAO,OAAIA,EAAQC,KAAKC,gBAAkBqC,EAAMtC,KAAKC,aAAa,IAEpGwC,MAAM,GAADC,OAAIJ,EAAMtC,KAAI,uBAEnBK,GAASsC,EAAAA,EAAAA,IAAWL,GAapB,EAAE9B,UAEFG,EAAAA,EAAAA,MAACK,EAAI,CAAAR,SAAA,EACHG,EAAAA,EAAAA,MAACW,EAAS,CAAAd,SAAA,CAAC,QAETD,EAAAA,EAAAA,KAACW,EAAK,CAAClB,KAAK,UACZO,EAAAA,EAAAA,KAACa,EAAY,CAACpB,KAAK,OAAO4C,UAAU,aAGtCjC,EAAAA,EAAAA,MAACW,EAAS,CAAAd,SAAA,CAAC,UAETD,EAAAA,EAAAA,KAACW,EAAK,CAAClB,KAAK,SAAS6C,KAAK,UAC1BtC,EAAAA,EAAAA,KAACa,EAAY,CAACpB,KAAK,SAAS4C,UAAU,aAGxCrC,EAAAA,EAAAA,KAAA,UAAQsC,KAAK,SAAQrC,SAAC,oBAI9B,E,UC5DasC,EAASpE,EAAAA,GAAAA,MAAYC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,uGAQrBH,EAAOC,EAAAA,GAAAA,EAAQI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,6CCLfmE,EAAS,WACpB,IAAMC,GAAc5C,EAAAA,EAAAA,IAAYjB,GAC1BkB,GAAWC,EAAAA,EAAAA,MACjB,OACEK,EAAAA,EAAAA,MAAA,OAAAH,SAAA,EACED,EAAAA,EAAAA,KAAC9B,EAAI,CAAA+B,UACHD,EAAAA,EAAAA,KAAA,KAAAC,SAAG,4BAELD,EAAAA,EAAAA,KAACuC,EAAM,CACLD,KAAK,OACL7C,KAAK,SACLiD,YAAY,kBACZX,MAAOU,EACPE,SAAU,SAACC,GAAC,OAAI9C,GAAS+C,EAAAA,EAAAA,GAAUD,EAAEE,OAAOf,OAAO,MAI3D,ECGA,MAjBA,WACE,IAAMjC,GAAWC,EAAAA,EAAAA,MACjBgD,ECPyB,WACzB,IAAM/D,GAAWa,EAAAA,EAAAA,IAAYd,GACvBI,GAAYU,EAAAA,EAAAA,IAAYX,GAG9B,MAAO,CACLF,SAAAA,EACAgE,SAJcnD,EAAAA,EAAAA,IAAYT,GAK1BD,UAAAA,EAEJ,CDHkC8D,GAAxB9D,EAAS4D,EAAT5D,UAAWH,EAAQ+D,EAAR/D,SAKnB,OAHAkE,EAAAA,EAAAA,YAAU,WACRpD,GAASqD,EAAAA,EAAAA,MACX,GAAG,CAACrD,KAEFM,EAAAA,EAAAA,MAAAgD,EAAAA,SAAA,CAAAnD,SAAA,EACED,EAAAA,EAAAA,KAACuB,EAAW,IACXvC,EAASqE,OAAS,IAAKrD,EAAAA,EAAAA,KAACwC,EAAM,IAC9BrD,IAAaa,EAAAA,EAAAA,KAAA,KAAAC,SAAG,4BACjBD,EAAAA,EAAAA,KAACJ,EAAW,MAGlB,C","sources":["components/ContactList/ContactCard.styled.js","components/ContactList/ContactList.styled.js","redux/filter/filterSelectors.js","redux/contacts/contactsSelectors.js","components/ContactList/ContactList.js","components/ContactForm/ContatctForm.styled.js","components/ContactForm/ContatctForm.js","components/Filter/Filter.styled.js","components/Filter/Filter.js","pages/Contacts/Contacts.js","hooks/useContatcs.js"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const Text = styled.p`\n  margin: 0;\n  padding: 0;\n  font-size: 18px;\n  color: black;\n  display: flex;\n  gap: 8px;\n`;\n\nexport const NumberText = styled.span`\n  font-size: 18px;\n  color: black;\n  display: block;\n`;\n\nexport const DeleteButton = styled.button`\n  background-color: transparent;\n  border: 2px solid black;\n  border-radius: 16px;\n  cursor: pointer;\n`;","import styled from \"styled-components\";\n\nexport const List = styled.ul`\n  list-style: none;\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n  padding: 0 10px;\n`;\n\nexport const ListItem = styled.li`\n  display: flex;\n  gap: 8px;\n`;","export const selectFilter = state => state.filter.filter;\n","import { createSelector } from \"@reduxjs/toolkit\";\nimport {selectFilter} from '../filter/filterSelectors'\n\nexport const selectContacts = state => state.contacts.items;\nexport const selectLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\n\nexport const visibleContatcs = createSelector([selectContacts, selectFilter],\n  (contacts, filter) => {\n    return contacts.filter(contact => contact.name.toLowerCase().includes(filter.toLowerCase()));\n})","import { useDispatch, useSelector } from 'react-redux';\nimport { DeleteButton, Text, NumberText } from './ContactCard.styled';\nimport { deleteContact } from '../../redux/contacts/operations';\nimport { List, ListItem } from './ContactList.styled';\nimport { visibleContatcs } from '../../redux/contacts/contactsSelectors';\n\nexport const ContactList = () => {\n  const contacts = useSelector(visibleContatcs);\n  const dispatch = useDispatch();\n  return (\n    <List>\n      {contacts.map(item => (\n        <ListItem key={item.id}>\n          <Text>\n            {item.name}\n            <NumberText>{item.number}</NumberText>\n          </Text>\n          <DeleteButton onClick={() => dispatch(deleteContact(item.id))}>\n            Delete\n          </DeleteButton>\n        </ListItem>\n      ))}\n    </List>\n  );\n};","import {\n  Form as FormikForm,\n  Field as FormikField,\n  ErrorMessage as FormikError,\n} from 'formik';\n\nimport styled from \"styled-components\";\n\nexport const Form = styled(FormikForm)`\n  display: flex;\n  flex-direction: column;\n  border: 2px solid black;\n  gap: 8px;\n  width: 320px;\n  padding: 10px;\n`;\n\nexport const Field = styled(FormikField)`\n  padding: 8px;\n`;\n\nexport const ErrorMessage = styled(FormikError)`\n  font-size: 14px;\n  color: red;\n`\n\nexport const FormGroup = styled.label`\n  display: flex;\n  flex-direction: column;\n  gap: 4px;\n`","import { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport {\n  Form,\n  Field,\n  ErrorMessage,\n  FormGroup,\n} from './ContatctForm.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from '../../redux/contacts/operations';\nimport { selectContacts } from '../../redux/contacts/contactsSelectors';\n\nconst phoneRegExp =\n  /^((\\\\+[1-9]{1,4}[ \\\\-]*)|(\\\\([0-9]{2,3}\\\\)[ \\\\-]*)|([0-9]{2,4})[ \\\\-]*)*?[0-9]{3,4}?[ \\\\-]*[0-9]{3,4}?$/;\nconst contactSchema = Yup.object().shape({\n  name: Yup.string().min(2, 'Too Short!').required('Required'),\n  number: Yup.string()\n    .matches(phoneRegExp, 'Phone number is not valid')\n    .required('Required'),\n});\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  const newContact= useSelector(selectContacts);\n\n  const handelSubmit = value => {\n    const sameContact = newContact.some(contact => contact.name.toLowerCase() === value.name.toLowerCase());\n    if (sameContact) {\n      alert(`${value.name} is alredy contact`);\n    } else {\n      dispatch(addContact(value));\n    }\n  };\n  return (\n    <Formik\n      initialValues={{\n        name: '',\n        number: '',\n      }}\n      validationSchema={contactSchema}\n      onSubmit={(values, actions) => {\n        actions.resetForm();\n        handelSubmit(values);\n      }}\n    >\n      <Form>\n        <FormGroup>\n          Name\n          <Field name=\"name\" />\n          <ErrorMessage name=\"name\" component=\"span\" />\n        </FormGroup>\n\n        <FormGroup>\n          Number\n          <Field name=\"number\" type=\"text\" />\n          <ErrorMessage name=\"number\" component=\"span\" />\n        </FormGroup>\n\n        <button type=\"submit\">Add contact</button>\n      </Form>\n    </Formik>\n  );\n};","import styled from \"styled-components\";\n\nexport const Search = styled.input`\nwidth: 320px;\npadding: 8px;\nborder: none;\noutline: 1px solid gray;\nborder-radius: 25px;\n`\n\nexport const Text = styled.p`\n  padding: 10px;\n  width: 320px;\n`","import { useDispatch, useSelector } from \"react-redux\"\nimport { setFilter } from \"../../redux/filter/filterSlice\";\nimport { selectFilter } from \"../../redux/filter/filterSelectors\";\nimport { Search, Text } from \"./Filter.styled\";\n\nexport const Filter = () => {\n  const filterValue = useSelector(selectFilter);\n  const dispatch = useDispatch();\n  return (\n    <div>\n      <Text>\n        <b>Find contact by name</b>\n      </Text>\n      <Search\n        type=\"text\"\n        name=\"filter\"\n        placeholder=\"Search contacts\"\n        value={filterValue}\n        onChange={(e)=> dispatch(setFilter(e.target.value))}\n      />\n    </div>\n  )\n}","import { ContactList } from 'components/ContactList/ContactList';\nimport { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { fetchContacts } from '../../redux/contacts/operations';\nimport { ContactForm } from 'components/ContactForm/ContatctForm';\nimport { Filter } from 'components/Filter/Filter';\nimport { useContacts } from '../../hooks/useContatcs';\n\nfunction Contacts() {\n  const dispatch = useDispatch();\n  const { isLoading, contacts } = useContacts();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n  return (\n    <>\n      <ContactForm />\n      {contacts.length > 0 && <Filter />}\n      {isLoading && <p>Request in progress...</p>}\n      <ContactList />\n    </>\n  );\n}\n\nexport default Contacts;\n","import { useSelector } from \"react-redux\"\nimport { selectContacts, selectError, selectLoading } from \"../redux/contacts/contactsSelectors\"\n\nexport const useContacts = () => {\n  const contacts = useSelector(selectContacts);\n  const isLoading = useSelector(selectLoading);\n  const isError = useSelector(selectError);\n\n  return {\n    contacts,\n    isError,\n    isLoading,\n  };\n};"],"names":["Text","styled","_templateObject","_taggedTemplateLiteral","NumberText","_templateObject2","DeleteButton","_templateObject3","List","ListItem","selectFilter","state","filter","selectContacts","contacts","items","selectLoading","isLoading","selectError","error","visibleContatcs","createSelector","contact","name","toLowerCase","includes","ContactList","useSelector","dispatch","useDispatch","_jsx","children","map","item","_jsxs","number","onClick","deleteContact","id","Form","FormikForm","Field","FormikField","ErrorMessage","FormikError","FormGroup","_templateObject4","contactSchema","Yup","shape","min","required","matches","ContactForm","newContact","Formik","initialValues","validationSchema","onSubmit","values","actions","value","resetForm","some","alert","concat","addContact","component","type","Search","Filter","filterValue","placeholder","onChange","e","setFilter","target","_useContacts","isError","useContacts","useEffect","fetchContacts","_Fragment","length"],"sourceRoot":""}